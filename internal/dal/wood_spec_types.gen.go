// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"wails_tables/internal/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newWoodSpecType(db *gorm.DB, opts ...gen.DOOption) woodSpecType {
	_woodSpecType := woodSpecType{}

	_woodSpecType.woodSpecTypeDo.UseDB(db, opts...)
	_woodSpecType.woodSpecTypeDo.UseModel(&models.WoodSpecType{})

	tableName := _woodSpecType.woodSpecTypeDo.TableName()
	_woodSpecType.ALL = field.NewAsterisk(tableName)
	_woodSpecType.Id = field.NewUint(tableName, "id")
	_woodSpecType.Name = field.NewString(tableName, "name")

	_woodSpecType.fillFieldMap()

	return _woodSpecType
}

type woodSpecType struct {
	woodSpecTypeDo

	ALL  field.Asterisk
	Id   field.Uint
	Name field.String

	fieldMap map[string]field.Expr
}

func (w woodSpecType) Table(newTableName string) *woodSpecType {
	w.woodSpecTypeDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w woodSpecType) As(alias string) *woodSpecType {
	w.woodSpecTypeDo.DO = *(w.woodSpecTypeDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *woodSpecType) updateTableName(table string) *woodSpecType {
	w.ALL = field.NewAsterisk(table)
	w.Id = field.NewUint(table, "id")
	w.Name = field.NewString(table, "name")

	w.fillFieldMap()

	return w
}

func (w *woodSpecType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *woodSpecType) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 2)
	w.fieldMap["id"] = w.Id
	w.fieldMap["name"] = w.Name
}

func (w woodSpecType) clone(db *gorm.DB) woodSpecType {
	w.woodSpecTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w woodSpecType) replaceDB(db *gorm.DB) woodSpecType {
	w.woodSpecTypeDo.ReplaceDB(db)
	return w
}

type woodSpecTypeDo struct{ gen.DO }

type IWoodSpecTypeDo interface {
	gen.SubQuery
	Debug() IWoodSpecTypeDo
	WithContext(ctx context.Context) IWoodSpecTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWoodSpecTypeDo
	WriteDB() IWoodSpecTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWoodSpecTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWoodSpecTypeDo
	Not(conds ...gen.Condition) IWoodSpecTypeDo
	Or(conds ...gen.Condition) IWoodSpecTypeDo
	Select(conds ...field.Expr) IWoodSpecTypeDo
	Where(conds ...gen.Condition) IWoodSpecTypeDo
	Order(conds ...field.Expr) IWoodSpecTypeDo
	Distinct(cols ...field.Expr) IWoodSpecTypeDo
	Omit(cols ...field.Expr) IWoodSpecTypeDo
	Join(table schema.Tabler, on ...field.Expr) IWoodSpecTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWoodSpecTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWoodSpecTypeDo
	Group(cols ...field.Expr) IWoodSpecTypeDo
	Having(conds ...gen.Condition) IWoodSpecTypeDo
	Limit(limit int) IWoodSpecTypeDo
	Offset(offset int) IWoodSpecTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWoodSpecTypeDo
	Unscoped() IWoodSpecTypeDo
	Create(values ...*models.WoodSpecType) error
	CreateInBatches(values []*models.WoodSpecType, batchSize int) error
	Save(values ...*models.WoodSpecType) error
	First() (*models.WoodSpecType, error)
	Take() (*models.WoodSpecType, error)
	Last() (*models.WoodSpecType, error)
	Find() ([]*models.WoodSpecType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.WoodSpecType, err error)
	FindInBatches(result *[]*models.WoodSpecType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.WoodSpecType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWoodSpecTypeDo
	Assign(attrs ...field.AssignExpr) IWoodSpecTypeDo
	Joins(fields ...field.RelationField) IWoodSpecTypeDo
	Preload(fields ...field.RelationField) IWoodSpecTypeDo
	FirstOrInit() (*models.WoodSpecType, error)
	FirstOrCreate() (*models.WoodSpecType, error)
	FindByPage(offset int, limit int) (result []*models.WoodSpecType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWoodSpecTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w woodSpecTypeDo) Debug() IWoodSpecTypeDo {
	return w.withDO(w.DO.Debug())
}

func (w woodSpecTypeDo) WithContext(ctx context.Context) IWoodSpecTypeDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w woodSpecTypeDo) ReadDB() IWoodSpecTypeDo {
	return w.Clauses(dbresolver.Read)
}

func (w woodSpecTypeDo) WriteDB() IWoodSpecTypeDo {
	return w.Clauses(dbresolver.Write)
}

func (w woodSpecTypeDo) Session(config *gorm.Session) IWoodSpecTypeDo {
	return w.withDO(w.DO.Session(config))
}

func (w woodSpecTypeDo) Clauses(conds ...clause.Expression) IWoodSpecTypeDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w woodSpecTypeDo) Returning(value interface{}, columns ...string) IWoodSpecTypeDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w woodSpecTypeDo) Not(conds ...gen.Condition) IWoodSpecTypeDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w woodSpecTypeDo) Or(conds ...gen.Condition) IWoodSpecTypeDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w woodSpecTypeDo) Select(conds ...field.Expr) IWoodSpecTypeDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w woodSpecTypeDo) Where(conds ...gen.Condition) IWoodSpecTypeDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w woodSpecTypeDo) Order(conds ...field.Expr) IWoodSpecTypeDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w woodSpecTypeDo) Distinct(cols ...field.Expr) IWoodSpecTypeDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w woodSpecTypeDo) Omit(cols ...field.Expr) IWoodSpecTypeDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w woodSpecTypeDo) Join(table schema.Tabler, on ...field.Expr) IWoodSpecTypeDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w woodSpecTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWoodSpecTypeDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w woodSpecTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IWoodSpecTypeDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w woodSpecTypeDo) Group(cols ...field.Expr) IWoodSpecTypeDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w woodSpecTypeDo) Having(conds ...gen.Condition) IWoodSpecTypeDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w woodSpecTypeDo) Limit(limit int) IWoodSpecTypeDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w woodSpecTypeDo) Offset(offset int) IWoodSpecTypeDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w woodSpecTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWoodSpecTypeDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w woodSpecTypeDo) Unscoped() IWoodSpecTypeDo {
	return w.withDO(w.DO.Unscoped())
}

func (w woodSpecTypeDo) Create(values ...*models.WoodSpecType) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w woodSpecTypeDo) CreateInBatches(values []*models.WoodSpecType, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w woodSpecTypeDo) Save(values ...*models.WoodSpecType) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w woodSpecTypeDo) First() (*models.WoodSpecType, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.WoodSpecType), nil
	}
}

func (w woodSpecTypeDo) Take() (*models.WoodSpecType, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.WoodSpecType), nil
	}
}

func (w woodSpecTypeDo) Last() (*models.WoodSpecType, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.WoodSpecType), nil
	}
}

func (w woodSpecTypeDo) Find() ([]*models.WoodSpecType, error) {
	result, err := w.DO.Find()
	return result.([]*models.WoodSpecType), err
}

func (w woodSpecTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.WoodSpecType, err error) {
	buf := make([]*models.WoodSpecType, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w woodSpecTypeDo) FindInBatches(result *[]*models.WoodSpecType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w woodSpecTypeDo) Attrs(attrs ...field.AssignExpr) IWoodSpecTypeDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w woodSpecTypeDo) Assign(attrs ...field.AssignExpr) IWoodSpecTypeDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w woodSpecTypeDo) Joins(fields ...field.RelationField) IWoodSpecTypeDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w woodSpecTypeDo) Preload(fields ...field.RelationField) IWoodSpecTypeDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w woodSpecTypeDo) FirstOrInit() (*models.WoodSpecType, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.WoodSpecType), nil
	}
}

func (w woodSpecTypeDo) FirstOrCreate() (*models.WoodSpecType, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.WoodSpecType), nil
	}
}

func (w woodSpecTypeDo) FindByPage(offset int, limit int) (result []*models.WoodSpecType, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w woodSpecTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w woodSpecTypeDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w woodSpecTypeDo) Delete(models ...*models.WoodSpecType) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *woodSpecTypeDo) withDO(do gen.Dao) *woodSpecTypeDo {
	w.DO = *do.(*gen.DO)
	return w
}
